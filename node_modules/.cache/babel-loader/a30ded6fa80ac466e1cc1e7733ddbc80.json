{"ast":null,"code":"let accessToken = ''; //HIDE CLIENTID ON GITHUB\n//Obtain clientID at https://developer.spotify.com/dashboard/applications \n\nconst clientId = '';\nconst redirectUri = 'http://localhost:3000/';\nconst Spotify = {\n  //grab access token from Spotify\n  getAccessToken() {\n    if (accessToken !== '') {\n      return accessToken;\n    } else {\n      //check Spotify returned spotifyUrl\n      let spotifyUrl = window.location.href; //console.log(spotifyUrl);\n\n      if (spotifyUrl !== '') {\n        let reToken = /access_token=([^&]*)/;\n        let reExpTime = /expires_in=([^&]*)/;\n        let expiresIn = '';\n        accessToken = spotifyUrl.match(reToken);\n        expiresIn = spotifyUrl.match(reExpTime); //check if token and expTime are in url\n\n        if (accessToken !== null && expiresIn !== null) {\n          accessToken = accessToken[1];\n          expiresIn = expiresIn[1]; //console.log(accessToken);\n          //console.log(expiresIn);\n\n          window.setTimeout(() => accessToken = '', expiresIn * 1000);\n          window.history.pushState('Access Token', null, '/');\n        } else {\n          console.log('Access Token and Expires time is null');\n          window.location = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientId, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);\n        }\n      } else {\n        console.log('SpotifyUrl is empty');\n        window.location = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientId, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);\n      }\n    }\n  },\n\n  //fetch search results from Spotify search tracks endpoint\n  search(term) {\n    return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term), {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (jsonResponse.tracks.items) {\n        console.log(jsonResponse.tracks.items);\n        return jsonResponse.tracks.items.map(track => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        }));\n      }\n    });\n  },\n\n  //Save playlist name and playlist tracks to user's Spotify account\n  savePlaylist(playlistName, trackUris) {\n    if (playlistName !== null && trackUris !== null) {\n      let currUserAccessToken = accessToken;\n      let headers = {\n        'Authorization': 'Bearer ' + currUserAccessToken\n      };\n      let userId = ''; //grab user's ID\n\n      userId = fetch(\"https://api.spotify.com/v1/me\", {\n        headers: headers\n      }).then(response => {\n        return response.json();\n      }).then(jsonResponse => {\n        if (jsonResponse.id) {\n          return jsonResponse.id;\n        }\n      }); //POST the playlist name\n\n      userId.then(id => {\n        fetch(\"https://api.spotify.com/v1/users/\".concat(id, \"/playlists\"), {\n          method: 'POST',\n          headers: {\n            'Authorization': 'Bearer ' + currUserAccessToken,\n            \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            \"name\": playlistName\n          })\n        }).then(response => {\n          if (response.ok) {\n            return response.json();\n          }\n\n          throw new Error('Request failed! Playlist name not posted');\n        }, networkError => {\n          console.log(networkError.message);\n        }).then(jsonResponse => {\n          return jsonResponse.id;\n        }).then(playlistId => {\n          //POST the playlist tracks\n          fetch(\"https://api.spotify.com/v1/users/\".concat(id, \"/playlists/\").concat(playlistId, \"/tracks\"), {\n            method: 'POST',\n            headers: {\n              'Authorization': 'Bearer ' + currUserAccessToken,\n              \"Content-type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              \"uris\": trackUris\n            })\n          }).then(response => {\n            if (response.ok) {\n              return response.json();\n            }\n\n            throw new Error('Request failed! Playlist tracks not posted');\n          }, networkError => {\n            console.log(networkError.message);\n          }).then(jsonResponse => {\n            return jsonResponse.id;\n          });\n        });\n      });\n    } else {\n      return;\n    }\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["c:\\DevProjects\\jammming\\Jammming\\src\\util\\Spotify.js"],"names":["accessToken","clientId","redirectUri","Spotify","getAccessToken","spotifyUrl","window","location","href","reToken","reExpTime","expiresIn","match","setTimeout","history","pushState","console","log","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","playlistName","trackUris","currUserAccessToken","userId","method","body","JSON","stringify","ok","Error","networkError","message","playlistId"],"mappings":"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","sourcesContent":["let accessToken = '';\r\n//HIDE CLIENTID ON GITHUB\r\n//Obtain clientID at https://developer.spotify.com/dashboard/applications \r\nconst clientId = '';\r\nconst redirectUri = 'http://localhost:3000/';\r\n\r\nconst Spotify = {\r\n  //grab access token from Spotify\r\n  getAccessToken(){\r\n    if(accessToken!==''){\r\n      return accessToken;\r\n    }else{\r\n\r\n        //check Spotify returned spotifyUrl\r\n        let spotifyUrl = window.location.href;\r\n        //console.log(spotifyUrl);\r\n        if(spotifyUrl!==''){\r\n\r\n            let reToken = /access_token=([^&]*)/;\r\n            let reExpTime = /expires_in=([^&]*)/;\r\n            let expiresIn = '';\r\n            accessToken = spotifyUrl.match(reToken);\r\n            expiresIn = spotifyUrl.match(reExpTime);\r\n\r\n            //check if token and expTime are in url\r\n            if(accessToken!==null&&expiresIn!==null){\r\n              accessToken=accessToken[1];\r\n              expiresIn=expiresIn[1];\r\n              //console.log(accessToken);\r\n              //console.log(expiresIn);\r\n              window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n              window.history.pushState('Access Token', null, '/');\r\n            }else{\r\n              console.log('Access Token and Expires time is null');\r\n              window.location = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            }\r\n\r\n        }else{\r\n          console.log('SpotifyUrl is empty');\r\n          window.location = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n        }\r\n\r\n    }\r\n  },\r\n  //fetch search results from Spotify search tracks endpoint\r\n  search(term){\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`\r\n      }\r\n    }).then(response => {\r\n      return response.json();\r\n    }).then(jsonResponse => {\r\n\r\n      if (jsonResponse.tracks.items) {\r\n        console.log(jsonResponse.tracks.items);\r\n        return jsonResponse.tracks.items.map(track=>({\r\n          id: track.id,\r\n          name: track.name,\r\n          artist: track.artists[0].name,\r\n          album: track.album.name,\r\n          uri: track.uri\r\n        }));\r\n      }\r\n\r\n    });\r\n  },\r\n\r\n  //Save playlist name and playlist tracks to user's Spotify account\r\n  savePlaylist(playlistName,trackUris){\r\n\r\n    if(playlistName!==null&&trackUris!==null){\r\n      let currUserAccessToken = accessToken;\r\n      let headers = {\r\n        'Authorization': 'Bearer '+ currUserAccessToken\r\n      }\r\n      let userId = '';\r\n\r\n      //grab user's ID\r\n      userId = fetch(`https://api.spotify.com/v1/me`, {\r\n        headers: headers\r\n      }).then(response => {\r\n        return response.json();\r\n      }).then(jsonResponse => {\r\n        if(jsonResponse.id){\r\n          return jsonResponse.id;\r\n        }\r\n      });\r\n\r\n      //POST the playlist name\r\n      userId.then(id=>{\r\n\r\n        fetch(`https://api.spotify.com/v1/users/${id}/playlists`,{\r\n          method: 'POST',\r\n          headers: {\r\n            'Authorization': 'Bearer '+ currUserAccessToken,\r\n            \"Content-type\": \"application/json\"\r\n          },\r\n          body: JSON.stringify({\"name\":playlistName})\r\n        }).then(response=>{\r\n          if(response.ok){\r\n             return response.json();\r\n          }\r\n          throw new Error('Request failed! Playlist name not posted');\r\n        },networkError=>{\r\n          console.log(networkError.message);\r\n        }).then(jsonResponse=>{\r\n          return jsonResponse.id\r\n        }).then(playlistId=>{\r\n\r\n            //POST the playlist tracks\r\n            fetch(`https://api.spotify.com/v1/users/${id}/playlists/${playlistId}/tracks`,{\r\n              method: 'POST',\r\n              headers: {\r\n                'Authorization': 'Bearer '+ currUserAccessToken,\r\n                \"Content-type\": \"application/json\"\r\n              },\r\n              body: JSON.stringify({\r\n                \"uris\":trackUris\r\n              })\r\n            }).then(response=>{\r\n              if(response.ok){\r\n                 return response.json();\r\n              }\r\n              throw new Error('Request failed! Playlist tracks not posted');\r\n            },networkError=>{\r\n              console.log(networkError.message);\r\n            }).then(jsonResponse=>{\r\n              return jsonResponse.id\r\n            })\r\n\r\n\r\n        });\r\n\r\n      });\r\n\r\n    }else{\r\n      return;\r\n    }\r\n  }\r\n\r\n};\r\n\r\nexport default Spotify;\r\n"]},"metadata":{},"sourceType":"module"}